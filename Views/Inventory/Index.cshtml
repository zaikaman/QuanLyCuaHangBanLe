@model IEnumerable<QuanLyCuaHangBanLe.Models.Inventory>

@{
    ViewData["Title"] = "Qu·∫£n l√Ω t·ªìn kho";
}

<style>
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .stats-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-box {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        border-left: 4px solid #667eea;
    }

    .stat-box h3 {
        font-size: 0.85rem;
        color: #718096;
        margin-bottom: 8px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-box .value {
        font-size: 2rem;
        font-weight: 700;
        color: #2d3748;
    }

    .inventory-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }

    .inventory-header {
        padding: 20px 25px;
        border-bottom: 2px solid #f7fafc;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-input {
        padding: 10px 15px;
        border: 2px solid #e2e8f0;
        border-radius: 10px;
        width: 300px;
        font-size: 0.9rem;
    }

    .inventory-table {
        width: 100%;
        border-collapse: collapse;
    }

    .inventory-table thead {
        background: #f7fafc;
    }

    .inventory-table th {
        padding: 15px 20px;
        text-align: left;
        font-weight: 600;
        color: #4a5568;
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .inventory-table td {
        padding: 18px 20px;
        border-bottom: 1px solid #f7fafc;
        color: #2d3748;
        font-size: 0.95rem;
    }

    .inventory-table tbody tr:hover {
        background: #f7fafc;
    }

    .product-name {
        font-weight: 600;
        color: #2d3748;
    }

    .quantity-badge {
        display: inline-block;
        padding: 6px 14px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .quantity-badge.low {
        background: #fed7d7;
        color: #c53030;
    }

    .quantity-badge.medium {
        background: #feebc8;
        color: #c05621;
    }

    .quantity-badge.high {
        background: #c6f6d5;
        color: #22543d;
    }

    .btn-action {
        padding: 8px 16px;
        border-radius: 8px;
        background: #bee3f8;
        color: #2c5282;
        border: none;
        font-size: 0.85rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-action:hover {
        background: #90cdf4;
    }
</style>

<div class="page-header">
    <div>
        <h1>üìã Qu·∫£n l√Ω t·ªìn kho</h1>
        <p style="color: #718096; margin-top: 5px;">Theo d√µi s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho</p>
    </div>
</div>

<div class="stats-row">
    <div class="stat-box" style="border-left-color: #667eea;">
        <h3>T·ªïng s·∫£n ph·∫©m</h3>
        <div class="value">@Model.Count()</div>
    </div>
    <div class="stat-box" style="border-left-color: #48bb78;">
        <h3>T·ªïng t·ªìn kho</h3>
        <div class="value">@Model.Sum(i => i.Quantity)</div>
    </div>
    <div class="stat-box" style="border-left-color: #ed8936;">
        <h3>S·∫Øp h·∫øt h√†ng</h3>
        <div class="value">@Model.Count(i => i.Quantity < 50)</div>
    </div>
    <div class="stat-box" style="border-left-color: #f56565;">
        <h3>H·∫øt h√†ng</h3>
        <div class="value">@Model.Count(i => i.Quantity == 0)</div>
    </div>
</div>

<div class="inventory-card">
    <div class="inventory-header">
        <input type="text" class="search-input" placeholder="üîç T√¨m ki·∫øm s·∫£n ph·∫©m..." />
        <div style="color: #718096; font-size: 0.9rem;">
            C·∫≠p nh·∫≠t: @DateTime.Now.ToString("dd/MM/yyyy HH:mm")
        </div>
    </div>

    <table class="inventory-table">
        <thead>
            <tr>
                <th>M√£ SP</th>
                <th>T√™n s·∫£n ph·∫©m</th>
                <th>S·ªë l∆∞·ª£ng t·ªìn</th>
                <th>Tr·∫°ng th√°i</th>
                <th>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi</th>
                <th>Thao t√°c</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>SP@item.ProductId.ToString("D3")</td>
                    <td>
                        <div class="product-name">S·∫£n ph·∫©m #@item.ProductId</div>
                    </td>
                    <td>
                        <strong style="font-size: 1.1rem;">@item.Quantity</strong> ƒë∆°n v·ªã
                    </td>
                    <td>
                        @if (item.Quantity == 0)
                        {
                            <span class="quantity-badge low">H·∫øt h√†ng</span>
                        }
                        else if (item.Quantity < 50)
                        {
                            <span class="quantity-badge medium">S·∫Øp h·∫øt</span>
                        }
                        else
                        {
                            <span class="quantity-badge high">ƒê·ªß h√†ng</span>
                        }
                    </td>
                    <td>@item.UpdatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>
                        <button class="btn-action" onclick="updateInventory(@item.InventoryId)">
                            üì¶ C·∫≠p nh·∫≠t
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    function updateInventory(id) {
        const quantity = prompt('Nh·∫≠p s·ªë l∆∞·ª£ng m·ªõi:');
        if (quantity !== null && quantity !== '') {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Inventory/UpdateQuantity';
            
            const idInput = document.createElement('input');
            idInput.type = 'hidden';
            idInput.name = 'id';
            idInput.value = id;
            
            const quantityInput = document.createElement('input');
            quantityInput.type = 'hidden';
            quantityInput.name = 'quantity';
            quantityInput.value = quantity;
            
            form.appendChild(idInput);
            form.appendChild(quantityInput);
            document.body.appendChild(form);
            form.submit();
        }
    }
</script>
