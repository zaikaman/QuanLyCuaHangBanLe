@model IEnumerable<QuanLyCuaHangBanLe.Models.Inventory>

@{
    ViewData["Title"] = "Qu·∫£n l√Ω t·ªìn kho";
}

@Html.AntiForgeryToken()

<style>
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .stats-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-box {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        border-left: 4px solid #1a1a1a;
        border: 1px solid #e5e5e5;
        border-left: 4px solid #1a1a1a;
    }

    .stat-box h3 {
        font-size: 0.85rem;
        color: #666666;
        margin-bottom: 8px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-box .value {
        font-size: 2rem;
        font-weight: 700;
        color: #1a1a1a;
    }

    .inventory-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        border: 1px solid #e5e5e5;
    }

    .inventory-header {
        padding: 20px 25px;
        border-bottom: 1px solid #e5e5e5;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-input {
        padding: 10px 15px;
        border: 1px solid #e5e5e5;
        border-radius: 8px;
        width: 300px;
        font-size: 0.9rem;
        background: #fafafa;
    }

    .inventory-table {
        width: 100%;
        border-collapse: collapse;
    }

    .inventory-table thead {
        background: #fafafa;
    }

    .inventory-table th {
        padding: 15px 20px;
        text-align: left;
        font-weight: 600;
        color: #666666;
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border-bottom: 1px solid #e5e5e5;
    }

    .inventory-table td {
        padding: 18px 20px;
        border-bottom: 1px solid #f5f5f5;
        color: #1a1a1a;
        font-size: 0.95rem;
    }

    .inventory-table tbody tr:hover {
        background: #fafafa;
    }

    .product-name {
        font-weight: 600;
        color: #1a1a1a;
    }

    .quantity-badge {
        display: inline-block;
        padding: 6px 14px;
        border-radius: 6px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .quantity-badge.low {
        background: #ffebee;
        color: #c62828;
    }

    .quantity-badge.medium {
        background: #fff3e0;
        color: #e65100;
    }

    .quantity-badge.high {
        background: #e8f5e9;
        color: #2e7d32;
    }

    .btn-action {
        padding: 8px 16px;
        border-radius: 8px;
        background: #f5f5f5;
        color: #1a1a1a;
        border: 1px solid #e5e5e5;
        font-size: 0.85rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .btn-action:hover {
        background: #e5e5e5;
        border-color: #4E5FFF;
    }
</style>

<div class="page-header">
    <div>
        <h1>üìã Qu·∫£n l√Ω t·ªìn kho</h1>
        <p style="color: #718096; margin-top: 5px;">Theo d√µi s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho</p>
    </div>
</div>

<div class="stats-row">
    <div class="stat-box" style="border-left-color: #1a1a1a;">
        <h3>T·ªïng s·∫£n ph·∫©m</h3>
        <div class="value">@Model.Count()</div>
    </div>
    <div class="stat-box" style="border-left-color: #48bb78;">
        <h3>T·ªïng t·ªìn kho</h3>
        <div class="value">@Model.Sum(i => i.Quantity)</div>
    </div>
    <div class="stat-box" style="border-left-color: #ed8936;">
        <h3>S·∫Øp h·∫øt h√†ng</h3>
        <div class="value">@Model.Count(i => i.Quantity < 50)</div>
    </div>
    <div class="stat-box" style="border-left-color: #f56565;">
        <h3>H·∫øt h√†ng</h3>
        <div class="value">@Model.Count(i => i.Quantity == 0)</div>
    </div>
</div>

<div class="inventory-card">
    <div class="inventory-header">
        <form asp-action="Index" method="get" style="margin: 0;">
            <input type="text" name="searchTerm" class="search-input" placeholder="üîç T√¨m ki·∫øm s·∫£n ph·∫©m..." value="@ViewBag.SearchTerm" />
            <input type="hidden" name="page" value="1" />
        </form>
        <div style="color: #718096; font-size: 0.9rem;">
            C·∫≠p nh·∫≠t: @DateTime.Now.ToString("dd/MM/yyyy HH:mm")
        </div>
    </div>

    <table class="inventory-table">
        <thead>
            <tr>
                <th>M√£ SP</th>
                <th>T√™n s·∫£n ph·∫©m</th>
                <th>S·ªë l∆∞·ª£ng t·ªìn</th>
                <th>Tr·∫°ng th√°i</th>
                <th>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi</th>
                <th>Thao t√°c</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@($"SP{item.ProductId:D3}")</td>
                    <td>
                        <div class="product-name">S·∫£n ph·∫©m #@item.ProductId</div>
                    </td>
                    <td>
                        <strong style="font-size: 1.1rem;">@item.Quantity</strong> ƒë∆°n v·ªã
                    </td>
                    <td>
                        @if (item.Quantity == 0)
                        {
                            <span class="quantity-badge low">H·∫øt h√†ng</span>
                        }
                        else if (item.Quantity < 50)
                        {
                            <span class="quantity-badge medium">S·∫Øp h·∫øt</span>
                        }
                        else
                        {
                            <span class="quantity-badge high">ƒê·ªß h√†ng</span>
                        }
                    </td>
                    <td>@item.UpdatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>
                        <button class="btn-action" onclick="updateInventory(@item.InventoryId)">
                            üì¶ C·∫≠p nh·∫≠t
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (ViewBag.TotalPages != null && ViewBag.TotalPages > 1)
{
    <div class="pagination-container" style="display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 30px; padding: 20px;">
        @if (ViewBag.CurrentPage > 1)
        {
            <a asp-action="Index" asp-route-page="@(ViewBag.CurrentPage - 1)" asp-route-searchTerm="@ViewBag.SearchTerm" class="pagination-btn" style="padding: 10px 16px; background: #4E5FFF; color: white; border-radius: 8px; text-decoration: none; font-weight: 500; transition: all 0.3s;">‚Üê Tr∆∞·ªõc</a>
        }
        
        <div style="display: flex; gap: 5px;">
            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                if (i == ViewBag.CurrentPage)
                {
                    <span class="pagination-current" style="padding: 10px 16px; background: #4E5FFF; color: white; border-radius: 8px; font-weight: 600;">@i</span>
                }
                else if (i == 1 || i == ViewBag.TotalPages || (i >= ViewBag.CurrentPage - 2 && i <= ViewBag.CurrentPage + 2))
                {
                    <a asp-action="Index" asp-route-page="@i" asp-route-searchTerm="@ViewBag.SearchTerm" style="padding: 10px 16px; background: #f5f5f5; color: #1a1a1a; border-radius: 8px; text-decoration: none; transition: all 0.3s;">@i</a>
                }
                else if (i == ViewBag.CurrentPage - 3 || i == ViewBag.CurrentPage + 3)
                {
                    <span style="padding: 10px 16px;">...</span>
                }
            }
        </div>
        
        @if (ViewBag.CurrentPage < ViewBag.TotalPages)
        {
            <a asp-action="Index" asp-route-page="@(ViewBag.CurrentPage + 1)" asp-route-searchTerm="@ViewBag.SearchTerm" class="pagination-btn" style="padding: 10px 16px; background: #4E5FFF; color: white; border-radius: 8px; text-decoration: none; font-weight: 500; transition: all 0.3s;">Sau ‚Üí</a>
        }
    </div>
}

<!-- Update Quantity Modal -->
<div id="updateModal" class="modal-overlay" style="display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: var(--modal-overlay); z-index: 1000; align-items: center; justify-content: center;">
    <div class="modal-container" style="background: var(--modal-bg); border-radius: 16px; padding: 0; max-width: 450px; width: 90%; box-shadow: var(--shadow-xl); border: 1px solid var(--border-primary);">
        <div class="modal-header" style="padding: 24px 28px; border-bottom: 1px solid var(--border-primary);">
            <h3 style="margin: 0; font-size: 1.3rem; color: var(--text-primary);">üì¶ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho</h3>
            <button class="modal-close" onclick="closeUpdateModal()" style="background: none; border: none; font-size: 1.5rem; color: var(--text-secondary); cursor: pointer; padding: 0; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; border-radius: 8px; transition: all 0.2s;">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body" style="padding: 28px;">
            <div style="margin-bottom: 20px;">
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: var(--text-primary);">S·∫£n ph·∫©m</label>
                <div id="productName" style="padding: 12px 16px; background: var(--bg-tertiary); border-radius: 8px; color: var(--text-secondary); font-size: 0.95rem;"></div>
            </div>
            <div style="margin-bottom: 20px;">
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: var(--text-primary);">S·ªë l∆∞·ª£ng hi·ªán t·∫°i</label>
                <div id="currentQuantity" style="padding: 12px 16px; background: var(--bg-tertiary); border-radius: 8px; color: var(--text-secondary); font-size: 0.95rem;"></div>
            </div>
            <div style="margin-bottom: 24px;">
                <label for="newQuantity" style="display: block; font-weight: 600; margin-bottom: 8px; color: var(--text-primary);">S·ªë l∆∞·ª£ng m·ªõi <span style="color: var(--color-error);">*</span></label>
                <input type="number" id="newQuantity" min="0" placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng m·ªõi..." style="width: 100%; padding: 14px 16px; border: 2px solid var(--border-primary); border-radius: 10px; font-size: 1rem; background: var(--input-bg); color: var(--text-primary); transition: all 0.2s;" />
            </div>
        </div>
        <div class="modal-footer" style="padding: 20px 28px; border-top: 1px solid var(--border-primary); display: flex; gap: 12px; justify-content: flex-end;">
            <button onclick="closeUpdateModal()" style="padding: 12px 24px; border: 1px solid var(--border-primary); background: var(--bg-tertiary); color: var(--text-primary); border-radius: 10px; font-weight: 600; cursor: pointer; transition: all 0.2s;">
                H·ªßy
            </button>
            <button onclick="submitUpdate()" style="padding: 12px 24px; border: none; background: var(--color-primary); color: #ffffff; border-radius: 10px; font-weight: 600; cursor: pointer; transition: all 0.2s;">
                C·∫≠p nh·∫≠t
            </button>
        </div>
    </div>
</div>

<script>
    // Auto-submit search form khi g√µ (v·ªõi debounce)
    let searchTimeout;
    document.querySelector('.search-input').addEventListener('input', function(e) {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            e.target.closest('form').submit();
        }, 500); // ƒê·ª£i 500ms sau khi ng∆∞·ªùi d√πng ng·ª´ng g√µ
    });

    let currentInventoryId = null;

    function updateInventory(id) {
        currentInventoryId = id;
        const row = event.target.closest('tr');
        const productName = row.querySelector('td:first-child .product-name')?.textContent || 'S·∫£n ph·∫©m #' + id;
        const currentQty = row.querySelector('td:nth-child(3) strong')?.textContent || '0';
        
        document.getElementById('productName').textContent = productName;
        document.getElementById('currentQuantity').textContent = currentQty + ' ƒë∆°n v·ªã';
        document.getElementById('newQuantity').value = '';
        
        const modal = document.getElementById('updateModal');
        modal.style.display = 'flex';
        document.getElementById('newQuantity').focus();
    }

    function closeUpdateModal() {
        document.getElementById('updateModal').style.display = 'none';
        currentInventoryId = null;
    }

    async function submitUpdate() {
        const quantity = document.getElementById('newQuantity').value;
        
        if (quantity === '' || quantity === null) {
            alert('Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng!');
            return;
        }
        
        if (parseInt(quantity) < 0) {
            alert('S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0!');
            return;
        }
        
        try {
            const formData = new FormData();
            formData.append('inventoryId', currentInventoryId);
            formData.append('quantity', quantity);
            
            // L·∫•y anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            if (token) {
                formData.append('__RequestVerificationToken', token.value);
            }
            
            const response = await fetch('/Inventory/UpdateQuantity', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                closeUpdateModal();
                alert(result.message);
                location.reload(); // Reload ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu
            } else {
                alert('L·ªói: ' + result.message);
            }
        } catch (error) {
            alert('L·ªói khi c·∫≠p nh·∫≠t: ' + error.message);
        }
    }

    // Close modal on ESC key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeUpdateModal();
        }
    });

    // Close modal on overlay click
    document.getElementById('updateModal')?.addEventListener('click', function(e) {
        if (e.target === this) {
            closeUpdateModal();
        }
    });

    // Submit on Enter key
    document.getElementById('newQuantity')?.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            submitUpdate();
        }
    });
</script>
