@model IEnumerable<QuanLyCuaHangBanLe.Models.Inventory>

@{
    ViewData["Title"] = "Qu·∫£n l√Ω t·ªìn kho";
}

<style>
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .stats-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-box {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        border-left: 4px solid #1a1a1a;
        border: 1px solid #e5e5e5;
        border-left: 4px solid #1a1a1a;
    }

    .stat-box h3 {
        font-size: 0.85rem;
        color: #666666;
        margin-bottom: 8px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-box .value {
        font-size: 2rem;
        font-weight: 700;
        color: #1a1a1a;
    }

    .inventory-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        border: 1px solid #e5e5e5;
    }

    .inventory-header {
        padding: 20px 25px;
        border-bottom: 1px solid #e5e5e5;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-input {
        padding: 10px 15px;
        border: 1px solid #e5e5e5;
        border-radius: 8px;
        width: 300px;
        font-size: 0.9rem;
        background: #fafafa;
    }

    .inventory-table {
        width: 100%;
        border-collapse: collapse;
    }

    .inventory-table thead {
        background: #fafafa;
    }

    .inventory-table th {
        padding: 15px 20px;
        text-align: left;
        font-weight: 600;
        color: #666666;
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border-bottom: 1px solid #e5e5e5;
    }

    .inventory-table td {
        padding: 18px 20px;
        border-bottom: 1px solid #f5f5f5;
        color: #1a1a1a;
        font-size: 0.95rem;
    }

    .inventory-table tbody tr:hover {
        background: #fafafa;
    }

    .product-name {
        font-weight: 600;
        color: #1a1a1a;
    }

    .quantity-badge {
        display: inline-block;
        padding: 6px 14px;
        border-radius: 6px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .quantity-badge.low {
        background: #ffebee;
        color: #c62828;
    }

    .quantity-badge.medium {
        background: #fff3e0;
        color: #e65100;
    }

    .quantity-badge.high {
        background: #e8f5e9;
        color: #2e7d32;
    }

    .btn-action {
        padding: 8px 16px;
        border-radius: 8px;
        background: #f5f5f5;
        color: #1a1a1a;
        border: 1px solid #e5e5e5;
        font-size: 0.85rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .btn-action:hover {
        background: #e5e5e5;
        border-color: #4E5FFF;
    }
</style>

<div class="page-header">
    <div>
        <h1>üìã Qu·∫£n l√Ω t·ªìn kho</h1>
        <p style="color: #718096; margin-top: 5px;">Theo d√µi s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho</p>
    </div>
</div>

<div class="stats-row">
    <div class="stat-box" style="border-left-color: #1a1a1a;">
        <h3>T·ªïng s·∫£n ph·∫©m</h3>
        <div class="value">@Model.Count()</div>
    </div>
    <div class="stat-box" style="border-left-color: #48bb78;">
        <h3>T·ªïng t·ªìn kho</h3>
        <div class="value">@Model.Sum(i => i.Quantity)</div>
    </div>
    <div class="stat-box" style="border-left-color: #ed8936;">
        <h3>S·∫Øp h·∫øt h√†ng</h3>
        <div class="value">@Model.Count(i => i.Quantity < 50)</div>
    </div>
    <div class="stat-box" style="border-left-color: #f56565;">
        <h3>H·∫øt h√†ng</h3>
        <div class="value">@Model.Count(i => i.Quantity == 0)</div>
    </div>
</div>

<div class="inventory-card">
    <div class="inventory-header">
        <input type="text" class="search-input" placeholder="üîç T√¨m ki·∫øm s·∫£n ph·∫©m..." />
        <div style="color: #718096; font-size: 0.9rem;">
            C·∫≠p nh·∫≠t: @DateTime.Now.ToString("dd/MM/yyyy HH:mm")
        </div>
    </div>

    <table class="inventory-table">
        <thead>
            <tr>
                <th>M√£ SP</th>
                <th>T√™n s·∫£n ph·∫©m</th>
                <th>S·ªë l∆∞·ª£ng t·ªìn</th>
                <th>Tr·∫°ng th√°i</th>
                <th>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi</th>
                <th>Thao t√°c</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@($"SP{item.ProductId:D3}")</td>
                    <td>
                        <div class="product-name">S·∫£n ph·∫©m #@item.ProductId</div>
                    </td>
                    <td>
                        <strong style="font-size: 1.1rem;">@item.Quantity</strong> ƒë∆°n v·ªã
                    </td>
                    <td>
                        @if (item.Quantity == 0)
                        {
                            <span class="quantity-badge low">H·∫øt h√†ng</span>
                        }
                        else if (item.Quantity < 50)
                        {
                            <span class="quantity-badge medium">S·∫Øp h·∫øt</span>
                        }
                        else
                        {
                            <span class="quantity-badge high">ƒê·ªß h√†ng</span>
                        }
                    </td>
                    <td>@item.UpdatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>
                        <button class="btn-action" onclick="updateInventory(@item.InventoryId)">
                            üì¶ C·∫≠p nh·∫≠t
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (ViewBag.TotalPages != null && ViewBag.TotalPages > 1)
{
    <div class="pagination-container" style="display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 30px; padding: 20px;">
        @if (ViewBag.CurrentPage > 1)
        {
            <a asp-action="Index" asp-route-page="@(ViewBag.CurrentPage - 1)" class="pagination-btn" style="padding: 10px 16px; background: #4E5FFF; color: white; border-radius: 8px; text-decoration: none; font-weight: 500; transition: all 0.3s;">‚Üê Tr∆∞·ªõc</a>
        }
        
        <div style="display: flex; gap: 5px;">
            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                if (i == ViewBag.CurrentPage)
                {
                    <span class="pagination-current" style="padding: 10px 16px; background: #4E5FFF; color: white; border-radius: 8px; font-weight: 600;">@i</span>
                }
                else if (i == 1 || i == ViewBag.TotalPages || (i >= ViewBag.CurrentPage - 2 && i <= ViewBag.CurrentPage + 2))
                {
                    <a asp-action="Index" asp-route-page="@i" style="padding: 10px 16px; background: #f5f5f5; color: #1a1a1a; border-radius: 8px; text-decoration: none; transition: all 0.3s;">@i</a>
                }
                else if (i == ViewBag.CurrentPage - 3 || i == ViewBag.CurrentPage + 3)
                {
                    <span style="padding: 10px 16px;">...</span>
                }
            }
        </div>
        
        @if (ViewBag.CurrentPage < ViewBag.TotalPages)
        {
            <a asp-action="Index" asp-route-page="@(ViewBag.CurrentPage + 1)" class="pagination-btn" style="padding: 10px 16px; background: #4E5FFF; color: white; border-radius: 8px; text-decoration: none; font-weight: 500; transition: all 0.3s;">Sau ‚Üí</a>
        }
    </div>
}

<script>
    // Real-time search cho t·ªìn kho
    document.querySelector('.search-input').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase().trim();
        const rows = document.querySelectorAll('.inventory-table tbody tr');
        let visibleCount = 0;

        rows.forEach(row => {
            const productName = row.querySelector('td:first-child')?.textContent.toLowerCase() || '';
            
            if (productName.includes(searchTerm)) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        });

        // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng t√¨m th·∫•y
        const table = document.querySelector('.inventory-table');
        
        if (visibleCount === 0 && searchTerm !== '') {
            if (table) table.style.display = 'none';
            
            let emptyState = document.querySelector('.empty-search-state');
            if (!emptyState) {
                emptyState = document.createElement('div');
                emptyState.className = 'empty-search-state';
                emptyState.style.cssText = 'text-align: center; padding: 60px 20px;';
                emptyState.innerHTML = `
                    <div style="font-size: 3rem; margin-bottom: 20px;">üîç</div>
                    <div style="font-size: 1.2rem; font-weight: 600; color: #1a1a1a; margin-bottom: 10px;">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m</div>
                    <p style="color: #666;">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o kh·ªõp v·ªõi t·ª´ kh√≥a "${searchTerm}"</p>
                `;
                document.querySelector('.inventory-card').appendChild(emptyState);
            }
        } else {
            if (table) table.style.display = '';
            
            const emptyState = document.querySelector('.empty-search-state');
            if (emptyState) emptyState.remove();
        }
    });

    function updateInventory(id) {
        const quantity = prompt('Nh·∫≠p s·ªë l∆∞·ª£ng m·ªõi:');
        if (quantity !== null && quantity !== '') {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Inventory/UpdateQuantity';
            
            const idInput = document.createElement('input');
            idInput.type = 'hidden';
            idInput.name = 'id';
            idInput.value = id;
            
            const quantityInput = document.createElement('input');
            quantityInput.type = 'hidden';
            quantityInput.name = 'quantity';
            quantityInput.value = quantity;
            
            form.appendChild(idInput);
            form.appendChild(quantityInput);
            document.body.appendChild(form);
            form.submit();
        }
    }
</script>
