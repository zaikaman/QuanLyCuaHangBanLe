@model QuanLyCuaHangBanLe.Models.Order

@{
    ViewData["Title"] = "T·∫°o ƒë∆°n h√†ng m·ªõi";
}

<style>
    .form-container {    .btn-submit {
        background: #4E5FFF;
        color: white;
        border: 2px solid #4E5FFF;
    }

    .btn-submit:hover {
        background: #ffffff;
        color: #4E5FFF;
        border: 2px solid #4E5FFF;
        box-shadow: 0 4px 12px rgba(78, 95, 255, 0.3);
    }max-width: 1200px;
        margin: 0 auto;
    }

    .form-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
        padding: 30px;
        border: 1px solid #e5e5e5;
        margin-bottom: 20px;
    }

    .form-header {
        margin-bottom: 25px;
        padding-bottom: 15px;
        border-bottom: 2px solid #f5f5f5;
    }

    .form-header h2 {
        font-size: 1.3rem;
        font-weight: 600;
        color: #1a1a1a;
        margin: 0;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        color: #1a1a1a;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .form-control, .form-select {
        width: 100%;
        padding: 10px 14px;
        border: 1px solid #e5e5e5;
        border-radius: 8px;
        font-size: 0.95rem;
        transition: all 0.2s ease;
        background: #fafafa;
    }

    .form-control:focus, .form-select:focus {
        outline: none;
        border-color: #4E5FFF;
        background: white;
        box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.05);
    }

    .items-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
    }

    .items-table th {
        background: #fafafa;
        padding: 12px;
        text-align: left;
        font-weight: 600;
        font-size: 0.85rem;
        color: #666666;
        border-bottom: 2px solid #e5e5e5;
    }

    .items-table td {
        padding: 12px;
        border-bottom: 1px solid #f5f5f5;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.2s ease;
        border: none;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-add {
        background: #e8f5e9;
        color: #2e7d32;
        margin-top: 10px;
    }

    .btn-add:hover {
        background: #c8e6c9;
    }

    .btn-remove {
        background: #ffebee;
        color: #c62828;
        padding: 6px 12px;
        font-size: 0.85rem;
    }

    .btn-remove:hover {
        background: #ffcdd2;
    }

    .btn-submit {
        background: #4E5FFF;
        color: white;
    }

    .btn-submit:hover {
        background: #4E5FFF;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .btn-cancel {
        background: #e5e5e5;
        color: #1a1a1a;
    }

    .btn-cancel:hover {
        background: #d4d4d4;
    }

    .form-actions {
        display: flex;
        gap: 15px;
        margin-top: 30px;
        padding-top: 25px;
        border-top: 2px solid #f5f5f5;
    }

    .total-section {
        background: #fafafa;
        padding: 20px;
        border-radius: 8px;
        margin-top: 20px;
    }

    .total-row {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        font-size: 0.95rem;
    }

    .total-row.final {
        font-size: 1.2rem;
        font-weight: 700;
        color: #1a1a1a;
        border-top: 2px solid #e5e5e5;
        margin-top: 10px;
        padding-top: 15px;
    }

    .required {
        color: #dc3545;
        margin-left: 3px;
    }
</style>

<div class="form-container">
    <form asp-action="Create" method="post" id="orderForm">
        @Html.AntiForgeryToken()
        
        <div class="form-card">
            <div class="form-header">
                <h2>üõçÔ∏è T·∫°o ƒë∆°n h√†ng m·ªõi</h2>
            </div>

            <!-- Th√¥ng tin kh√°ch h√†ng -->
            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">
                        Kh√°ch h√†ng<span class="required">*</span>
                    </label>
                    <select asp-for="CustomerId" class="form-select" asp-items="ViewBag.Customers" required>
                        <option value="">Ch·ªçn kh√°ch h√†ng</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Tr·∫°ng th√°i</label>
                    <select asp-for="Status" class="form-select">
                        <option value="pending">Ch·ªù x·ª≠ l√Ω</option>
                        <option value="paid">ƒê√£ thanh to√°n</option>
                        <option value="canceled">ƒê√£ h·ªßy</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="form-card">
            <div class="form-header">
                <h2>üì¶ S·∫£n ph·∫©m trong ƒë∆°n h√†ng</h2>
            </div>

        <table class="items-table">
            <thead>
                <tr>
                    <th style="width: 40%">S·∫£n ph·∫©m</th>
                    <th style="width: 15%">S·ªë l∆∞·ª£ng</th>
                    <th style="width: 20%">ƒê∆°n gi√°</th>
                    <th style="width: 20%">Th√†nh ti·ªÅn</th>
                    <th style="width: 5%"></th>
                </tr>
            </thead>
            <tbody id="itemsContainer">
                <tr class="item-row">
                    <td>
                        <select name="orderItems[0].ProductId" class="form-select product-select" required onchange="loadProductInfo(this, 0)">
                            <option value="">Ch·ªçn s·∫£n ph·∫©m</option>
                            @if (ViewBag.Products != null)
                            {
                                var products = ViewBag.Products as SelectList;
                                if (products != null)
                                {
                                    foreach (var item in products)
                                    {
                                        <option value="@item.Value">@item.Text</option>
                                    }
                                }
                            }
                        </select>
                    </td>
                    <td>
                        <input type="number" name="orderItems[0].Quantity" class="form-control quantity-input" value="1" min="1" required onchange="calculateSubtotal(0)">
                    </td>
                    <td>
                        <input type="number" name="orderItems[0].Price" class="form-control price-input" readonly>
                    </td>
                    <td>
                        <input type="number" name="orderItems[0].Subtotal" class="form-control subtotal-input" readonly>
                    </td>
                    <td>
                        <button type="button" class="btn btn-remove" onclick="removeItem(this)">üóëÔ∏è</button>
                    </td>
                </tr>
            </tbody>
        </table>

        <button type="button" class="btn btn-add" onclick="addItem()">‚ûï Th√™m s·∫£n ph·∫©m</button>

        <div class="total-section">
            <div class="total-row">
                <span>T·ªïng ti·ªÅn h√†ng:</span>
                <span id="totalAmount">0ƒë</span>
            </div>
            <div class="total-row">
                <span>Gi·∫£m gi√°:</span>
                <input type="number" asp-for="DiscountAmount" class="form-control" style="width: 200px; text-align: right;" value="0" min="0" step="1000" onchange="calculateTotal()">
            </div>
            <div class="total-row final">
                <span>T·ªïng thanh to√°n:</span>
                <span id="finalTotal">0ƒë</span>
            </div>
        </div>

        <div class="form-actions">
            <button type="submit" class="btn btn-submit">
                ‚úÖ T·∫°o ƒë∆°n h√†ng
            </button>
            <a asp-action="Index" class="btn btn-cancel">
                ‚ùå H·ªßy b·ªè
            </a>
        </div>
        </form>
    </div>
</div>

<script>
    let itemIndex = 1;

    function addItem() {
        console.log('üîµ addItem() ƒë∆∞·ª£c g·ªçi, itemIndex hi·ªán t·∫°i:', itemIndex);
        const container = document.getElementById('itemsContainer');
        const newRow = document.createElement('tr');
        newRow.className = 'item-row';
        
        @{
            var productOptions = "";
            if (ViewBag.Products != null)
            {
                var products = ViewBag.Products as SelectList;
                if (products != null)
                {
                    foreach (var item in products)
                    {
                        productOptions += $"<option value='{item.Value}'>{item.Text}</option>";
                    }
                }
            }
        }
        
        newRow.innerHTML = `
            <td>
                <select name="orderItems[${itemIndex}].ProductId" class="form-select product-select" required onchange="loadProductInfo(this, ${itemIndex})">
                    <option value="">Ch·ªçn s·∫£n ph·∫©m</option>
                    @Html.Raw(productOptions)
                </select>
            </td>
            <td>
                <input type="number" name="orderItems[${itemIndex}].Quantity" class="form-control quantity-input" value="1" min="1" required onchange="calculateSubtotal(${itemIndex})">
            </td>
            <td>
                <input type="number" name="orderItems[${itemIndex}].Price" class="form-control price-input" readonly>
            </td>
            <td>
                <input type="number" name="orderItems[${itemIndex}].Subtotal" class="form-control subtotal-input" readonly>
            </td>
            <td>
                <button type="button" class="btn btn-remove" onclick="removeItem(this)">üóëÔ∏è</button>
            </td>
        `;
        container.appendChild(newRow);
        itemIndex++;
        console.log('‚úÖ ƒê√£ th√™m row m·ªõi, itemIndex m·ªõi:', itemIndex);
    }

    function removeItem(btn) {
        console.log('üî¥ removeItem() ƒë∆∞·ª£c g·ªçi');
        const row = btn.closest('tr');
        const itemCount = document.querySelectorAll('.item-row').length;
        console.log('   S·ªë l∆∞·ª£ng items hi·ªán t·∫°i:', itemCount);
        
        if (itemCount > 1) {
            row.remove();
            calculateTotal();
            console.log('‚úÖ ƒê√£ x√≥a row, c√≤n l·∫°i:', document.querySelectorAll('.item-row').length);
        } else {
            console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a - ph·∫£i c√≥ √≠t nh·∫•t 1 s·∫£n ph·∫©m');
            toast.warning('Ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m trong ƒë∆°n h√†ng', 'C·∫£nh b√°o');
        }
    }

    async function loadProductInfo(select, index) {
        const productId = select.value;
        console.log(`üîµ loadProductInfo() - index: ${index}, productId: ${productId}`);
        
        if (!productId) {
            console.log('‚ö†Ô∏è Kh√¥ng c√≥ productId, b·ªè qua');
            return;
        }

        try {
            console.log('   ƒêang g·ªçi API GetProductInfo...');
            const response = await fetch('/Orders/GetProductInfo?productId=' + productId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            });

            const data = await response.json();
            console.log('   K·∫øt qu·∫£ API:', data);
            
            if (data.success) {
                const row = select.closest('tr');
                const priceInput = row.querySelector('.price-input');
                const quantityInput = row.querySelector('.quantity-input');
                
                priceInput.value = data.price;
                console.log(`‚úÖ ƒê√£ set gi√°: ${data.price} cho s·∫£n ph·∫©m: ${data.productName}`);
                calculateSubtotal(index);
            } else {
                console.error('‚ùå API tr·∫£ v·ªÅ l·ªói:', data.message);
            }
        } catch (error) {
            console.error('‚ùå Error loading product info:', error);
        }
    }

    function calculateSubtotal(index) {
        console.log(`üîµ calculateSubtotal() - index: ${index}`);
        const rows = document.querySelectorAll('.item-row');
        const row = rows[index];
        
        if (!row) {
            console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y row v·ªõi index:', index);
            return;
        }

        const quantity = parseFloat(row.querySelector('.quantity-input').value) || 0;
        const price = parseFloat(row.querySelector('.price-input').value) || 0;
        const subtotal = quantity * price;
        
        console.log(`   Quantity: ${quantity}, Price: ${price}, Subtotal: ${subtotal}`);
        
        row.querySelector('.subtotal-input').value = subtotal;
        calculateTotal();
    }

    function calculateTotal() {
        console.log('üîµ calculateTotal() ƒë∆∞·ª£c g·ªçi');
        let total = 0;
        const subtotals = [];
        
        document.querySelectorAll('.subtotal-input').forEach(input => {
            const value = parseFloat(input.value) || 0;
            subtotals.push(value);
            total += value;
        });

        console.log('   C√°c subtotals:', subtotals);
        console.log('   T·ªïng ti·ªÅn h√†ng:', total);

        document.getElementById('totalAmount').textContent = total.toLocaleString('vi-VN') + 'ƒë';
        
        const discount = parseFloat(document.querySelector('input[name="DiscountAmount"]').value) || 0;
        const finalTotal = Math.max(0, total - discount);
        
        console.log('   Gi·∫£m gi√°:', discount);
        console.log('   T·ªïng thanh to√°n:', finalTotal);
        
        document.getElementById('finalTotal').textContent = finalTotal.toLocaleString('vi-VN') + 'ƒë';
    }

    // Kh·ªüi t·∫°o
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üöÄ Trang Create Order ƒë√£ load');
        console.log('   S·ªë l∆∞·ª£ng products trong dropdown:', document.querySelectorAll('.product-select option').length - 1);
        console.log('   S·ªë l∆∞·ª£ng customers trong dropdown:', document.querySelectorAll('select[name="CustomerId"] option').length - 1);
        calculateTotal();
    });
    
    // Log khi submit form
    document.getElementById('orderForm').addEventListener('submit', function(e) {
        console.log('üì§ Form ƒëang ƒë∆∞·ª£c submit...');
        
        // Thu th·∫≠p d·ªØ li·ªáu form
        const formData = new FormData(this);
        const orderData = {
            customerId: formData.get('CustomerId'),
            status: formData.get('Status'),
            discountAmount: formData.get('DiscountAmount'),
            items: []
        };
        
        // Thu th·∫≠p items
        document.querySelectorAll('.item-row').forEach((row, index) => {
            const productId = row.querySelector('.product-select').value;
            const quantity = row.querySelector('.quantity-input').value;
            const price = row.querySelector('.price-input').value;
            const subtotal = row.querySelector('.subtotal-input').value;
            
            orderData.items.push({
                index,
                productId,
                quantity,
                price,
                subtotal
            });
        });
        
        console.log('üì¶ D·ªØ li·ªáu ƒë∆°n h√†ng:', orderData);
        
        // Validation
        if (!orderData.customerId) {
            console.error('‚ùå Ch∆∞a ch·ªçn kh√°ch h√†ng!');
        }
        
        const invalidItems = orderData.items.filter(item => !item.productId || !item.quantity || !item.price);
        if (invalidItems.length > 0) {
            console.error('‚ùå C√≥ items kh√¥ng h·ª£p l·ªá:', invalidItems);
        }
        
        console.log('‚úÖ Validation passed, ƒëang submit...');
    });
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
