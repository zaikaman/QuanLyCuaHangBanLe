@model IEnumerable<QuanLyCuaHangBanLe.Models.Order>

@{
    ViewData["Title"] = "Qu·∫£n l√Ω ƒë∆°n h√†ng";
}

<style>
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .btn-primary {
        padding: 12px 24px;
        background: #1a1a1a;
        color: white;
        border: none;
        border-radius: 10px;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        background: #000000;
        color: white;
    }

    .orders-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }

    .orders-header {
        padding: 20px 25px;
        border-bottom: 2px solid #f7fafc;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .filter-tabs {
        display: flex;
        gap: 10px;
    }

    .filter-tab {
        padding: 8px 16px;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        background: white;
        cursor: pointer;
        font-size: 0.9rem;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .filter-tab:hover,
    .filter-tab.active {
        border-color: #1a1a1a;
        background: #f7fafc;
        color: #1a1a1a;
    }

    .orders-table {
        width: 100%;
        border-collapse: collapse;
    }

    .orders-table thead {
        background: #f7fafc;
    }

    .orders-table th {
        padding: 15px 20px;
        text-align: left;
        font-weight: 600;
        color: #4a5568;
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .orders-table td {
        padding: 18px 20px;
        border-bottom: 1px solid #f7fafc;
        color: #2d3748;
        font-size: 0.95rem;
    }

    .orders-table tbody tr {
        transition: all 0.2s ease;
    }

    .orders-table tbody tr:hover {
        background: #f7fafc;
    }

    .order-id {
        font-weight: 600;
        color: #1a1a1a;
    }

    .total-amount {
        font-weight: 600;
        color: #38a169;
    }

    .status-badge {
        display: inline-block;
        padding: 6px 14px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .status-badge.paid {
        background: #c6f6d5;
        color: #22543d;
    }

    .status-badge.pending {
        background: #feebc8;
        color: #7c2d12;
    }

    .status-badge.canceled {
        background: #fed7d7;
        color: #742a2a;
    }

    .actions {
        display: flex;
        gap: 10px;
    }

    .btn-action {
        padding: 8px 16px;
        border-radius: 8px;
        border: none;
        font-size: 0.85rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-block;
    }

    .btn-view {
        background: #c6f6d5;
        color: #22543d;
    }

    .btn-view:hover {
        background: #9ae6b4;
    }
</style>

<div class="page-header">
    <div>
        <h1>üõçÔ∏è Qu·∫£n l√Ω ƒë∆°n h√†ng</h1>
        <p style="color: #718096; margin-top: 5px;">Qu·∫£n l√Ω v√† theo d√µi ƒë∆°n h√†ng</p>
    </div>
    <a asp-action="Create" class="btn-primary">
        <span>‚ûï</span>
        T·∫°o ƒë∆°n h√†ng m·ªõi
    </a>
</div>

<div class="orders-card">
    <div class="orders-header">
        <div style="display: flex; gap: 20px; align-items: center; flex: 1;">
            <input type="text" class="search-input" placeholder="üîç T√¨m ki·∫øm ƒë∆°n h√†ng..." style="flex: 1; max-width: 400px; padding: 10px 14px; border: 1px solid #e5e5e5; border-radius: 8px; font-size: 0.95rem;" />
            <div class="filter-tabs">
                <button class="filter-tab active" data-filter="all">T·∫•t c·∫£</button>
                <button class="filter-tab" data-filter="paid">ƒê√£ thanh to√°n</button>
                <button class="filter-tab" data-filter="pending">Ch·ªù x·ª≠ l√Ω</button>
                <button class="filter-tab" data-filter="canceled">ƒê√£ h·ªßy</button>
            </div>
        </div>
        <div style="color: #718096; font-size: 0.9rem;">
            T·ªïng: <strong style="color: #2d3748;" id="orderCount">@Model.Count()</strong> ƒë∆°n h√†ng
        </div>
    </div>

    @if (Model.Any())
    {
        <table class="orders-table">
            <thead>
                <tr>
                    <th>M√£ ƒë∆°n</th>
                    <th>Kh√°ch h√†ng</th>
                    <th>Ng√†y ƒë·∫∑t</th>
                    <th>T·ªïng ti·ªÅn</th>
                    <th>Gi·∫£m gi√°</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>Thao t√°c</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.OrderByDescending(o => o.OrderDate))
                {
                    <tr>
                        <td>
                            <div class="order-id">#ORD-@order.OrderId.ToString("D3")</div>
                        </td>
                        <td>Kh√°ch h√†ng #@order.CustomerId</td>
                        <td>@order.OrderDate.ToString("dd/MM/yyyy HH:mm")</td>
                        <td class="total-amount">@order.TotalAmount.ToString("N0")ƒë</td>
                        <td>@order.DiscountAmount.ToString("N0")ƒë</td>
                        <td>
                            @if (order.Status == "paid")
                            {
                                <span class="status-badge paid">ƒê√£ thanh to√°n</span>
                            }
                            else if (order.Status == "pending")
                            {
                                <span class="status-badge pending">Ch·ªù x·ª≠ l√Ω</span>
                            }
                            else
                            {
                                <span class="status-badge canceled">ƒê√£ h·ªßy</span>
                            }
                        </td>
                        <td>
                            <div class="actions">
                                <a asp-action="Details" asp-route-id="@order.OrderId" class="btn-action btn-view">üëÅÔ∏è Chi ti·∫øt</a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div style="text-align: center; padding: 60px 20px; color: #a0aec0;">
            <div style="font-size: 4rem; margin-bottom: 20px;">üõçÔ∏è</div>
            <div>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</div>
        </div>
    }
</div>

<script>
    let currentFilter = 'all';

    // Real-time search cho ƒë∆°n h√†ng
    const searchInput = document.querySelector('.search-input');
    searchInput.addEventListener('input', function(e) {
        filterOrders();
    });

    // Filter tabs
    document.querySelectorAll('.filter-tab').forEach(tab => {
        tab.addEventListener('click', function() {
            document.querySelectorAll('.filter-tab').forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            currentFilter = this.getAttribute('data-filter');
            filterOrders();
        });
    });

    function filterOrders() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        const rows = document.querySelectorAll('.orders-table tbody tr');
        let visibleCount = 0;

        rows.forEach(row => {
            const orderId = row.querySelector('.order-id')?.textContent.toLowerCase() || '';
            const customer = row.querySelectorAll('td')[1]?.textContent.toLowerCase() || '';
            const date = row.querySelectorAll('td')[2]?.textContent.toLowerCase() || '';
            const statusBadge = row.querySelector('.status-badge');
            const status = statusBadge?.classList.contains('paid') ? 'paid' : 
                          statusBadge?.classList.contains('pending') ? 'pending' : 
                          statusBadge?.classList.contains('canceled') ? 'canceled' : '';

            // Ki·ªÉm tra filter status
            const matchesFilter = currentFilter === 'all' || status === currentFilter;
            
            // Ki·ªÉm tra search term
            const matchesSearch = searchTerm === '' || 
                                 orderId.includes(searchTerm) || 
                                 customer.includes(searchTerm) || 
                                 date.includes(searchTerm);

            if (matchesFilter && matchesSearch) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        });

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        document.getElementById('orderCount').textContent = visibleCount;

        // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng t√¨m th·∫•y
        const table = document.querySelector('.orders-table');
        
        if (visibleCount === 0) {
            if (table) table.style.display = 'none';
            
            let emptyState = document.querySelector('.empty-search-state');
            if (!emptyState) {
                emptyState = document.createElement('div');
                emptyState.className = 'empty-search-state';
                emptyState.style.cssText = 'text-align: center; padding: 60px 20px;';
                emptyState.innerHTML = `
                    <div style="font-size: 3rem; margin-bottom: 20px;">üîç</div>
                    <div style="font-size: 1.2rem; font-weight: 600; color: #1a1a1a; margin-bottom: 10px;">Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng</div>
                    <p style="color: #666;">Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o kh·ªõp v·ªõi b·ªô l·ªçc</p>
                `;
                document.querySelector('.orders-card').appendChild(emptyState);
            }
        } else {
            if (table) table.style.display = '';
            
            const emptyState = document.querySelector('.empty-search-state');
            if (emptyState) emptyState.remove();
        }
    }
</script>
