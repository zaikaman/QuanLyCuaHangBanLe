using Microsoft.EntityFrameworkCore;
using QuanLyCuaHangBanLe.Data;
using QuanLyCuaHangBanLe.Models;

namespace QuanLyCuaHangBanLe.Services
{
    public class OrderService : GenericRepository<Order>
    {
        public OrderService(ApplicationDbContext context) : base(context)
        {
        }

        /// <summary>
        /// T·∫°o ƒë∆°n h√†ng m·ªõi v·ªõi validation ƒë·∫ßy ƒë·ªß v√† c·∫≠p nh·∫≠t t·ªìn kho
        /// </summary>
        public async Task<(bool Success, string Message, Order? Order)> CreateOrderAsync(Order order, List<OrderItem> orderItems, string paymentMethod = "cash")
        {
            Console.WriteLine("üîµ ========== OrderService.CreateOrderAsync ==========");
            
            // S·ª≠ d·ª•ng transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu
            using var transaction = await _context.Database.BeginTransactionAsync();
            try
            {
                // 1. Validate ƒë∆°n h√†ng c∆° b·∫£n
                Console.WriteLine("   [1] Validate ƒë∆°n h√†ng c∆° b·∫£n...");
                
                if (order == null)
                {
                    Console.WriteLine("   ‚ùå Order null");
                    return (false, "Th√¥ng tin ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá", null);
                }

                if (orderItems == null || !orderItems.Any(i => i.ProductId > 0))
                {
                    Console.WriteLine($"   ‚ùå OrderItems kh√¥ng h·ª£p l·ªá - null: {orderItems == null}, count: {orderItems?.Count}, c√≥ ProductId > 0: {orderItems?.Any(i => i.ProductId > 0)}");
                    return (false, "ƒê∆°n h√†ng ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m", null);
                }

                if (order.CustomerId == null || order.CustomerId <= 0)
                {
                    Console.WriteLine($"   ‚ùå CustomerId kh√¥ng h·ª£p l·ªá: {order.CustomerId}");
                    return (false, "Vui l√≤ng ch·ªçn kh√°ch h√†ng", null);
                }

                Console.WriteLine($"   ‚úÖ Validation c∆° b·∫£n OK - CustomerId: {order.CustomerId}, Items: {orderItems.Count(i => i.ProductId > 0)}");

                // 2. Ki·ªÉm tra kh√°ch h√†ng t·ªìn t·∫°i
                Console.WriteLine("   [2] Ki·ªÉm tra kh√°ch h√†ng t·ªìn t·∫°i...");
                var customerExists = await _context.Customers.AnyAsync(c => c.CustomerId == order.CustomerId);
                if (!customerExists)
                {
                    Console.WriteLine($"   ‚ùå Kh√°ch h√†ng {order.CustomerId} kh√¥ng t·ªìn t·∫°i");
                    return (false, "Kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i", null);
                }
                Console.WriteLine($"   ‚úÖ Kh√°ch h√†ng {order.CustomerId} t·ªìn t·∫°i");

                // 3. Validate v√† t√≠nh to√°n t·ª´ng s·∫£n ph·∫©m
                Console.WriteLine("   [3] Validate v√† t√≠nh to√°n s·∫£n ph·∫©m...");
                decimal calculatedTotal = 0;
                var validOrderItems = new List<OrderItem>();

                foreach (var item in orderItems.Where(i => i.ProductId > 0))
                {
                    Console.WriteLine($"      - X·ª≠ l√Ω ProductId: {item.ProductId}, Quantity: {item.Quantity}");
                    
                    // L·∫•y th√¥ng tin s·∫£n ph·∫©m
                    var product = await _context.Products
                        .Include(p => p.Inventory)
                        .FirstOrDefaultAsync(p => p.ProductId == item.ProductId);

                    if (product == null)
                    {
                        Console.WriteLine($"      ‚ùå S·∫£n ph·∫©m {item.ProductId} kh√¥ng t·ªìn t·∫°i");
                        return (false, $"S·∫£n ph·∫©m ID {item.ProductId} kh√¥ng t·ªìn t·∫°i", null);
                    }

                    // Ki·ªÉm tra s·ªë l∆∞·ª£ng
                    if (item.Quantity <= 0)
                    {
                        Console.WriteLine($"      ‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá: {item.Quantity}");
                        return (false, $"S·ªë l∆∞·ª£ng s·∫£n ph·∫©m '{product.ProductName}' ph·∫£i l·ªõn h∆°n 0", null);
                    }

                    // Ki·ªÉm tra t·ªìn kho
                    var currentStock = product.Inventory?.Quantity ?? 0;
                    Console.WriteLine($"      T·ªìn kho hi·ªán t·∫°i: {currentStock}");
                    
                    if (currentStock < item.Quantity)
                    {
                        Console.WriteLine($"      ‚ùå Kh√¥ng ƒë·ªß t·ªìn kho");
                        return (false, $"S·∫£n ph·∫©m '{product.ProductName}' ch·ªâ c√≤n {currentStock} {product.Unit} trong kho", null);
                    }

                    // T√≠nh to√°n gi√°
                    item.Price = product.Price;
                    item.Subtotal = item.Quantity * item.Price;
                    calculatedTotal += item.Subtotal;

                    Console.WriteLine($"      ‚úÖ {product.ProductName}: {item.Quantity} x {item.Price} = {item.Subtotal}");

                    validOrderItems.Add(item);
                }

                Console.WriteLine($"   ‚úÖ T·ªïng ti·ªÅn h√†ng: {calculatedTotal}");

                // 4. Validate gi·∫£m gi√°
                Console.WriteLine("   [4] Validate gi·∫£m gi√°...");
                if (order.DiscountAmount < 0)
                {
                    Console.WriteLine($"   ‚ùå Gi·∫£m gi√° √¢m: {order.DiscountAmount}");
                    return (false, "Gi√° tr·ªã gi·∫£m gi√° kh√¥ng h·ª£p l·ªá", null);
                }

                if (order.DiscountAmount > calculatedTotal)
                {
                    Console.WriteLine($"   ‚ùå Gi·∫£m gi√° {order.DiscountAmount} > t·ªïng ti·ªÅn {calculatedTotal}");
                    return (false, "Gi√° tr·ªã gi·∫£m gi√° kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° t·ªïng ti·ªÅn h√†ng", null);
                }
                Console.WriteLine($"   ‚úÖ Gi·∫£m gi√° OK: {order.DiscountAmount}");

                // 5. Validate promotion (n·∫øu c√≥)
                if (order.PromoId.HasValue && order.PromoId > 0)
                {
                    Console.WriteLine($"   [5] Ki·ªÉm tra promotion: {order.PromoId}");
                    var promotion = await _context.Promotions
                        .FirstOrDefaultAsync(p => p.PromoId == order.PromoId);

                    if (promotion == null)
                    {
                        Console.WriteLine($"   ‚ùå Promotion kh√¥ng t·ªìn t·∫°i");
                        return (false, "M√£ khuy·∫øn m√£i kh√¥ng t·ªìn t·∫°i", null);
                    }

                    if (promotion.Status != "active")
                    {
                        Console.WriteLine($"   ‚ùå Promotion kh√¥ng active: {promotion.Status}");
                        return (false, "M√£ khuy·∫øn m√£i kh√¥ng c√≤n hi·ªáu l·ª±c", null);
                    }

                    if (promotion.StartDate > DateTime.Now || promotion.EndDate < DateTime.Now)
                    {
                        Console.WriteLine($"   ‚ùå Promotion h·∫øt h·∫°n");
                        return (false, "M√£ khuy·∫øn m√£i ƒë√£ h·∫øt h·∫°n ho·∫∑c ch∆∞a b·∫Øt ƒë·∫ßu", null);
                    }

                    if (promotion.UsageLimit > 0 && promotion.UsedCount >= promotion.UsageLimit)
                    {
                        Console.WriteLine($"   ‚ùå Promotion h·∫øt l∆∞·ª£t: {promotion.UsedCount}/{promotion.UsageLimit}");
                        return (false, "M√£ khuy·∫øn m√£i ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng", null);
                    }

                    if (promotion.MinOrderAmount > 0 && calculatedTotal < promotion.MinOrderAmount)
                    {
                        Console.WriteLine($"   ‚ùå Kh√¥ng ƒë·ªß gi√° tr·ªã t·ªëi thi·ªÉu: {calculatedTotal} < {promotion.MinOrderAmount}");
                        return (false, $"ƒê∆°n h√†ng ph·∫£i c√≥ gi√° tr·ªã t·ªëi thi·ªÉu {promotion.MinOrderAmount:N0}ƒë ƒë·ªÉ s·ª≠ d·ª•ng m√£ n√†y", null);
                    }

                    // C·∫≠p nh·∫≠t s·ªë l·∫ßn s·ª≠ d·ª•ng
                    promotion.UsedCount++;
                    _context.Promotions.Update(promotion);
                    Console.WriteLine($"   ‚úÖ Promotion OK, UsedCount: {promotion.UsedCount}");
                }

                // 6. Thi·∫øt l·∫≠p th√¥ng tin ƒë∆°n h√†ng
                Console.WriteLine("   [6] Thi·∫øt l·∫≠p th√¥ng tin ƒë∆°n h√†ng...");
                order.OrderDate = DateTime.Now;
                order.TotalAmount = calculatedTotal;
                order.Status = string.IsNullOrEmpty(order.Status) ? "pending" : order.Status;

                // Validate t·ªïng ti·ªÅn cu·ªëi
                var finalAmount = order.TotalAmount - order.DiscountAmount;
                if (finalAmount < 0)
                {
                    Console.WriteLine($"   ‚ùå T·ªïng ti·ªÅn √¢m: {finalAmount}");
                    return (false, "T·ªïng ti·ªÅn ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá", null);
                }
                Console.WriteLine($"   ‚úÖ T·ªïng thanh to√°n: {finalAmount}");

                // 7. L∆∞u ƒë∆°n h√†ng
                Console.WriteLine("   [7] L∆∞u ƒë∆°n h√†ng v√†o DB...");
                await _context.Orders.AddAsync(order);
                await _context.SaveChangesAsync();
                Console.WriteLine($"   ‚úÖ ƒê∆°n h√†ng ƒë√£ l∆∞u, OrderId: {order.OrderId}");

                // 8. L∆∞u OrderItems v√† c·∫≠p nh·∫≠t t·ªìn kho
                Console.WriteLine("   [8] L∆∞u OrderItems v√† c·∫≠p nh·∫≠t t·ªìn kho...");
                foreach (var item in validOrderItems)
                {
                    item.OrderId = order.OrderId;
                    await _context.OrderItems.AddAsync(item);
                    Console.WriteLine($"      - Th√™m OrderItem: ProductId={item.ProductId}, Quantity={item.Quantity}");

                    // C·∫≠p nh·∫≠t t·ªìn kho
                    var inventory = await _context.Inventories
                        .FirstOrDefaultAsync(i => i.ProductId == item.ProductId);

                    if (inventory != null)
                    {
                        var oldQuantity = inventory.Quantity;
                        inventory.Quantity -= item.Quantity;
                        inventory.UpdatedAt = DateTime.Now;
                        _context.Inventories.Update(inventory);
                        Console.WriteLine($"      - C·∫≠p nh·∫≠t inventory: {oldQuantity} -> {inventory.Quantity}");
                    }
                    else
                    {
                        // T·∫°o m·ªõi inventory n·∫øu ch∆∞a c√≥ (v·ªõi s·ªë √¢m)
                        var newInventory = new Inventory
                        {
                            ProductId = item.ProductId,
                            Quantity = -item.Quantity,
                            UpdatedAt = DateTime.Now
                        };
                        await _context.Inventories.AddAsync(newInventory);
                        Console.WriteLine($"      - T·∫°o m·ªõi inventory: {newInventory.Quantity}");
                    }
                }

                await _context.SaveChangesAsync();
                Console.WriteLine("   ‚úÖ OrderItems v√† inventory ƒë√£ l∆∞u");

                // 9. T·∫°o Payment record n·∫øu ƒë∆°n h√†ng ƒë√£ thanh to√°n
                if (order.Status == "paid")
                {
                    Console.WriteLine("   [9] T·∫°o Payment record...");
                    
                    // Validate payment method
                    var validPaymentMethods = new[] { "cash", "card", "bank_transfer", "e_wallet" };
                    if (!validPaymentMethods.Contains(paymentMethod.ToLower()))
                    {
                        Console.WriteLine($"   ‚ö†Ô∏è Payment method kh√¥ng h·ª£p l·ªá: {paymentMethod}, d√πng m·∫∑c ƒë·ªãnh 'cash'");
                        paymentMethod = "cash";
                    }
                    
                    var payment = new Payment
                    {
                        OrderId = order.OrderId,
                        Amount = finalAmount,
                        PaymentMethod = paymentMethod,
                        PaymentDate = DateTime.Now
                    };
                    await _context.Payments.AddAsync(payment);
                    await _context.SaveChangesAsync();
                    Console.WriteLine($"   ‚úÖ Payment ƒë√£ l∆∞u, Amount: {finalAmount}, Method: {paymentMethod}");
                }

                // 10. Commit transaction
                Console.WriteLine("   [10] Commit transaction...");
                await transaction.CommitAsync();
                Console.WriteLine("   ‚úÖ Transaction committed");

                // Load l·∫°i ƒë∆°n h√†ng v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
                var createdOrder = await GetByIdAsync(order.OrderId);
                Console.WriteLine($"‚úÖ ========== T·∫†O ƒê∆†N H√ÄNG TH√ÄNH C√îNG - OrderId: {order.OrderId} ==========");
                return (true, "T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng", createdOrder);
            }
            catch (Exception ex)
            {
                // Rollback n·∫øu c√≥ l·ªói
                Console.WriteLine($"‚ùå ========== L·ªñI: {ex.Message} ==========");
                Console.WriteLine($"   StackTrace: {ex.StackTrace}");
                await transaction.RollbackAsync();
                return (false, $"L·ªói khi t·∫°o ƒë∆°n h√†ng: {ex.Message}", null);
            }
        }

        public override async Task<IEnumerable<Order>> GetAllAsync()
        {
            return await _dbSet
                .Include(o => o.Customer)
                .Include(o => o.User)
                .Include(o => o.Promotion)
                .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.Product)
                .Include(o => o.Payments)
                .AsSplitQuery()
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();
        }

        public override async Task<Order?> GetByIdAsync(int id)
        {
            return await _dbSet
                .Include(o => o.Customer)
                .Include(o => o.User)
                .Include(o => o.Promotion)
                .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.Product)
                .Include(o => o.Payments)
                .AsSplitQuery()
                .FirstOrDefaultAsync(o => o.OrderId == id);
        }

        public async Task<IEnumerable<Order>> GetByCustomerAsync(int customerId)
        {
            return await _dbSet
                .Include(o => o.Customer)
                .Include(o => o.User)
                .Include(o => o.Promotion)
                .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.Product)
                .Include(o => o.Payments)
                .AsSplitQuery()
                .Where(o => o.CustomerId == customerId)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();
        }

        public async Task<IEnumerable<Order>> GetByDateRangeAsync(DateTime startDate, DateTime endDate)
        {
            return await _dbSet
                .Include(o => o.Customer)
                .Include(o => o.User)
                .Include(o => o.Promotion)
                .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.Product)
                .Include(o => o.Payments)
                .AsSplitQuery()
                .Where(o => o.OrderDate >= startDate && o.OrderDate <= endDate)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();
        }

        public async Task<IEnumerable<Order>> GetByStatusAsync(string status)
        {
            return await _dbSet
                .Include(o => o.Customer)
                .Include(o => o.User)
                .Include(o => o.Promotion)
                .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.Product)
                .Include(o => o.Payments)
                .AsSplitQuery()
                .Where(o => o.Status == status)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();
        }

        public async Task<decimal> GetTotalRevenueAsync(DateTime? startDate = null, DateTime? endDate = null)
        {
            var query = _dbSet.Where(o => o.Status == "paid");

            if (startDate.HasValue)
                query = query.Where(o => o.OrderDate >= startDate.Value);

            if (endDate.HasValue)
                query = query.Where(o => o.OrderDate <= endDate.Value);

            return await query.SumAsync(o => o.TotalAmount - o.DiscountAmount);
        }

        public async Task<int> GetTotalOrdersAsync(DateTime? startDate = null, DateTime? endDate = null)
        {
            var query = _dbSet.AsQueryable();

            if (startDate.HasValue)
                query = query.Where(o => o.OrderDate >= startDate.Value);

            if (endDate.HasValue)
                query = query.Where(o => o.OrderDate <= endDate.Value);

            return await query.CountAsync();
        }
    }
}
